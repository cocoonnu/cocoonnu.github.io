[{"title":"响应式交互方案记录","path":"/2025/05/23/responsive-learn/","content":"响应式交互方案记录 这篇文章主要记录响应式布局相关的开发笔记，包括视口适配、媒体查询、Flex&#x2F;Grid 布局等内容 了解响应式交互是什么首先我们来了解浏览器视口大小是什么，当浏览器最大化时为最大值。它由三个值决定：显示器尺寸、显示器分辨率和浏览器缩放比。 显示器尺寸越大，最大化浏览器视口就越大；显示器分辨率越大，最大化浏览器视口就越大。 当我们调整浏览器缩放比的时候，缩放百分比越小，浏览器视口越大（因此可模拟大屏观看效果） 下面是如何查看当前浏览器视口大小： 清楚浏览器视口大小之后，我们就可以开始了解 px 像素值了。在浏览器视口大小确定（不用再管窗口大小、显示器尺寸、分辨率大小了）之后，px 变成了一个绝对单位！！那么在 UI 给的设计稿中通常 Web 的视口大小定义为 1920 * 1080，如果你的浏览器视口大小也为这个的话，你看到的页面效果就和设计稿的显示效果一模一样了。那么响应式设计要解决的矛盾就是你的浏览器视口大小比设计稿视口大小小很多时，应该如何布局会比较舒服。下面是几个响应式布局的方案： 设计稿根据不同大小比例设定：就是 1920 _ 1080、1470 _ 881、1200 * 440 分段设计不同的布局效果，前端再对应开发。 设计稿直接用 rem 响应式分辨率为单位，前端也用 rem 进行开发。实现自动通过设置缩放比达到一致的显示效果（H5 常用）。 设计稿内容像素大小固定，并且一直居中显示，浏览器视口大小很大时两边内容会空（论坛、推特之内的网站常用）。 使用 Flex、Grid 和百分比布局，实现宽度自适应，高度实现给定高度或展示滚动条。 媒体查询方案 概念：通过视口宽度实现不同适配方案，作用：手动设置 html-font-size 、 手动修改不同视口宽度的样式 先把常规布局写完（视口宽度为 1024px） 然后从大到下 设置媒体查询 下面的会继承上面的样式 通过不同视口宽度下 修改某些元素的布局或样式 123456789/* 视口宽度：320 - 750 */@media screen and (max-width: 750px) &#123; ...;&#125;/* 视口宽度：0 - 320 */@media screen and (max-width: 30px) &#123; ...;&#125; 其他方案待更新","tags":["Web"],"categories":["技术文档"]},{"title":"DOM/BOM 开发笔记","path":"/2025/05/23/dom-learn/","content":"DOM/BOM 开发笔记 这篇文章主要记录 DOM&#x2F;BOM 相关的开发笔记，包括 DOM 操作、BOM 对象使用等内容 DOM BOM Event 对象属性MouseEvent MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent Event MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/Event e 就是鼠标对象 MouseEvent，它继承了 Event 事件对象，下面是它的常见属性 e.target：触发绑定事件的对象，可以为本体，也可以为子盒子 e.clientX：鼠标在页面上可视区域的位置，从浏览器可视区域左上角开始，即是以浏览器滑动条此刻的滑动到的位置为参考点，随滑动条移而变化 e.pageX：鼠标在页面上的位置，从页面左上角开始，即是以页面为参考点，不随滑动条移动而变化 e.offsetX：鼠标在 e.target 盒子里的位置，如果该盒子有边框，则可能出现负值 e.stopPropagation：阻止事件冒泡 e.preventDefault：组件事件默认行为 DOM 高宽度属性主要考察盒子模型，一个 DOM 对象包含如下的高宽度属性： offsetHeight、offsetWidth：包括盒子的 border + padding + content offsetTop、offsetLeft：该元素的上（左）外边框到其父元素的上（左）内边框之间的距离 clientHeight、clientWidth：包括盒子的 padding + content scrollHeight、scrollWidth：包括盒子的 padding + 实际内容的尺寸 scrollTop、scrollLeft：该盒子相对于其父盒子滚动的距离 实际内容是指该盒子可能含有子盒子，子盒子内容尺寸大于该盒子内容尺寸 判断可视区如何判断一个元素是否在浏览器窗口（也可换成其他父元素）的可视区域中：判断可视区方案 12345678910function isInViewPortOfOne(el) &#123; const viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; const offsetTop = el.offsetTop; const scrollTop = document.documentElement.scrollTop; const top = offsetTop - scrollTop; return top &lt;= viewPortHeight;&#125; getBoundingClientRect这个 API 可以获取当前盒子相对于视口（浏览器页面边缘）的位置属性 还可用于判断当前元素是否在可视区：https://vue3js.cn/interview/JavaScript/visible.html#getboundingclientrect MDN 官方文档：https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect DOM API 使用记录document 推荐文章：https://juejin.cn/post/7029691847060488228 方法 功能 兼容性 document.getElementById() 通过 id 得到元素 IE 6 document.getElementsByTagName() 通过标签名得到元素数组 IE 6 document.getElementsByClassName() 通过类名得到元素数组 IE 9 document.querySelector() 通过选择器得到元素 IE 8 部分兼容、IE 9 完全兼容 document.querySelectorAll() 通过选择器得到元素数组 IE 8 部分兼容、IE 9 完全兼容 滚动属性与样式 先确定一个父盒子的宽和高，然后将其样式设置为 over-flow: auto，即可开启滚动属性 要控制父盒子的滚动位置直接使用：ele.scrollTo(&#123; top: 0, behavior: &#39;smooth&#39; &#125;) 要指定滚动到某个子盒子的位置直接使用：children.scrollIntoView() 详细属性可自行查看 MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView 1234567891011const ele = document.getElementById(&quot;ele&quot;);const children = document.getElementById(&quot;children&quot;);// block：垂直方向对齐方式 inline：水平方向对齐方式if (children) children.scrollIntoView(&#123; behavior: &quot;smooth&quot;, block: &quot;end&quot;, inline: &quot;nearest&quot;, &#125;);ele.scrollTo(&#123; top: 0, behavior: &quot;smooth&quot; &#125;);","tags":["Web"],"categories":["技术文档"]},{"title":"Node 前端环境配置","path":"/2025/05/13/node-development/","content":"Node 前端环境配置 记录 Node 前端开发环境配置：npm&#x2F;yarn 管理、nrm 源切换、nvm 版本控制一站掌握 使用 NVM 管理版本Windows 安装方式 参考文章：https://zhuanlan.zhihu.com/p/646970780 安装 NVM 最新版：https://github.com/coreybutler/nvm-windows/releases 安装目录都选择 D 盘，默认已经帮我们配好了 NVM、Nodejs 的环境变量，如果之前安装过 Nodejs 那么一定要卸载！不管是 C 盘还是 D 盘，然后还有自定义的环境变量也一并删除！ 切换镜像源： 打开 NVM 的安装目录里面的 setting.txt 写入 node_mirror: https://npmmirror.com/mirrors/node/ 或者执行命令：nvm node_mirror https://npmmirror.com/mirrors/node/ Mac 安装方式 参考文章：https://blog.csdn.net/Cavin80/article/details/132831839 NVM 的常用命令： 12345678910$ nvm v # 显示nvm版本$ nvm off # 禁用node.js版本管理(不卸载任何东西)$ nvm on # 启用node.js版本管理$ nvm install &lt;version&gt; # 安装node.js的命名 version是版本号$ nvm uninstall &lt;version&gt; # 卸载node.js是的命令，卸载指定版本的nodejs，当安装失败时卸载使用$ nvm ls # 显示所有安装的node.js版本$ nvm list available # 显示可以安装的所有node.js的稳定版本$ nvm use &lt;version&gt; # 切换到使用指定的nodejs版本$ nvm install stable # 安装最新稳定版$ nvm alias default 14.10.0 # 设置环境默认node版本 npm 常用命令： npm init -y ：初始化一个 package.json 文件 npm i 或 npm install ：安装项目中所有依赖，npm i --force 强制安装依赖 npm uninstall [package name]：卸载项目中的依赖 npm update [package name]：升级项目中的依赖 npm i [package name] -S/--save：安装到 dependencies（生产环境） npm i [package name] -D/--save-dev：安装到 devDependencies（开发环境） npm install -global/-g &lt;package name&gt;：全局安装依赖 使用 NVM 的几个注意点 有了 NVM 之后，千万不要再去使用 Nodejs 安装包安装其他版本 使用 NVM 切换 Nodejs 版本之后，每个版本的全局包都独立，切换版本后需要再另外下载 npm 和 Nodejs 进行了捆绑，切换 Nodejs 版本会自动切换 npm 的版本 使用 NRM 切换镜像源可以直接使用 npm 命令来查看或者设置当前 npm（包括 yarn） 的镜像源： 12345# 查看当前的下载包镜像源$ npm config get registry# 将下载包镜像源切换为淘宝镜像源$ npm config set registry=https://registry.npm.taobao.org 或者下载一个全局的工具 NRM 来进行镜像源的管理：npm i nrm -g，注意是直接切换全局的镜像源，包括 npm、yarn 1234567$ nrm add &lt;registry&gt; &lt;url&gt; # 添加一个镜像源，通常是公司内部镜像源$ nrm use &lt;registry&gt; # 切换镜像源$ nrm del &lt;registry&gt; # 删除镜像源$ nrm ls # 列出所有镜像源 注意：切换成&nbsp;nrm&nbsp;镜像源之后不一定成功，因为如果项目中存在&nbsp;.npmrc&nbsp;或者&nbsp;.yarnrc&nbsp;则以这个配置文件的镜像源为准 使用 yarn 包管理工具官网：https://chore-update--yarnpkg.netlify.app/zh-Hans/ 全局安装：npm i yarn -g，切换 Nodejs 版本之后需要另外再下载 常用命令 123456789101112131415$ yarn init # 同npm init，执行输入信息后，会生成package.json文件$ yarn install # 安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock$ yarn install --flat # 安装一个包的单一版本$ yarn install --force # 强制安装$ yarn remove &lt;packageName&gt; # 删除一个包$ yarn upgrade &lt;packageName&gt;@&lt;version&gt; # 更新一个包的指定版本$ yarn add &lt;packageName&gt; # 安装一个包的最新版本$ yarn config set registry http://registry.npm.taobao.org/ # 设置镜像源$ yarn global add typescript # 全局下载命令（最好使用npm下载全局包） .yarnrc 在本地系统中的位置：&#x2F;Users&#x2F;cocoon&#x2F;.yarnrc，另外在单独的项目中也可以配置。通常用于指定这个项目的镜像源，因此无需使用 nrm 来回进行镜像源的切换。还可以指定某个第三方库单独的镜像源： 12registry &quot;https://npm.ekuaibao.com/&quot;&quot;@ant-design:registry&quot; &quot;https://registry.npmmirror.com/&quot; 安装本地 tgz 如果你有一个本地第三方库 tgz，你可以通过一下命令来安装： 123$ yarn add file:./enhance-layer-manager-7.0.3.tgz$ yarn add file:/Users/cocoon/Downloads/enhance-layer-manager-7.0.3.tgz","tags":["Node"],"categories":["技术文档"]},{"title":"Flutter 开发环境搭建","path":"/2025/05/13/flutter-mac-learn/","content":"Flutter 开发环境搭建 这篇文章主要记录在 Mac 上搭建 Flutter 开发环境的过程 Flutter Android Xcode Flutter SDK 先下载 Dart：brew install dart 下载 Flutter SDK，并配置环境变量：本地安装路径：/Users/cocoon/Applications/Flutter，export PATH=$HOME/Applications/Flutter/bin:$PATH 想要切换 SDK 版本只需要进入文件夹切换分支即可，可通过 flutter doctor 查看环境是否都配置成功 如果没有开梯子则需要设置 Flutter 镜像：https://docs.flutter.cn/community/china Android Studio 和 Android SDK 参考 Flutter 官网安卓开发配置：https://flutter.cn/docs/get-started/install/macos/mobile-android?tab=download 直接进入官网下载 IDE，进入 IDE 之前会要求你下载 Android SDK：https://developer.android.google.cn/studio?hl=zh-cn Android SDK 本地下载地址：/Users/cocoon/Applications/Android 官方除了 SDK 还下载了其他工具，可编辑器进入 设置 - 语言和框架 - Android SDK 中查看 配置 Android 环境变量（主要用于 adb 命令）：https://blog.csdn.net/MirkoWug/article/details/126948260 配置 Android 时遇到的问题 需要获取安卓许可和下载好列表上的安卓模拟器运行工具：https://flutter.cn/docs/get-started/install/macos/mobile-android?tab=download#configure-your-target-android-device Android Studio 运行项目时卡在 Running gradle assembleDebug：需要外网环境，或者修改 SDK 和项目安卓目录的镜像源：https://blog.csdn.net/Yyongchao/article/details/136896379 Xcode 和 IOS Simulator 参考 Flutter 官网 IOS 开发配置：https://docs.flutter.cn/get-started/install/macos/mobile-ios 下载好 Xcode 和 IOS Simulator 后，通过输入命令 open -a Simulator 运行即可 依然使用 Android Studio 将 Flutter 项目运行到 IOS Simulator 上面 Flutter 开发与调试 和 IDEA 编辑模式一致，编辑之后会自动保存文件，通过 opt + cmd + l 格式化代码 启动项目后每次修改完文件，可以按 cmd + s 或者手动点击闪电图标进行热更新 插件 FlutterSnippets 实现代码快捷生成 12stful -&gt; 生成一个 StatefulWidgetstless -&gt; 生成一个 StatelessWidget","tags":["Flutter"],"categories":["技术文档"]},{"title":"GASP 动画库学习指南","path":"/2025/05/06/gasp-learn/","content":"GASP 动画库学习指南 GASP 官方文档：https://gsap.com/，这篇文章会大致介绍一些动画工具的使用 GASP 基础使用首先 GASP 导出了四种动画方式，或者说是数值变化方式，常用的是 gasp.to(target, &#123;...&#125;) 就是让元素从初始状态变化到目标状态 其中 target 可以选择 DOM 元素，通常使用opacity 和 transform 这两个配置项来改变元素的状态和位移，属性参考：CorePlugins，还有一些特殊的配置项如：special-properties，主要用于控制一些动画的配置比如：ease、yoyo、repeat、delay、duration 这里再主要介绍 stagger 这个属性：如果 target 是一个数组或者选中了多个元素，那么可以让这些元素依次延时 stagger 执行相同的动画 123456789gsap.to(&quot;.box&quot;, &#123; duration: 1, rotation: 360, opacity: 1, delay: 0.5, stagger: 1, ease: &quot;sine.out&quot;, force3D: true,&#125;); targer 还可以是一个对象或者一个数值，GASP 依然可以精确实现数值的动态变化 1234567let obj = &#123; myNum: 10, myColor: &quot;red&quot; &#125;;gsap.to(obj, &#123; myNum: 200, myColor: &quot;blue&quot;, duration: 4, onUpdate: () =&gt; console.log(obj.myNum, obj.myColor),&#125;); 时间线的使用通过 let tl = gsap.timeline(&#123;...&#125;) 创建时间线后，可以决定时间线上动画的执行 时间线本质也是个动画，只不过是拆成了一个个子动画，并且可以控制这些子动画的执行顺序，因此后面的配置项可以控制这个时间线动画的属性：special-properties-and-callbacks 1234let tl = gsap.timeline(&#123; repeat: -1, repeatDelay: 1, yoyo: true &#125;); // 设置时间线动画无限执行tl.to(&quot;.green&quot;, &#123; rotation: 360 &#125;);tl.to(&quot;.purple&quot;, &#123; rotation: 360 &#125;);tl.to(&quot;.orange&quot;, &#123; rotation: 360 &#125;); 通过设置 defaults: &#123; duration: 1, ease: &quot;elastic&quot; &#125;，配置子动画的默认属性，得到配置的效率提升 12345var tl = gsap.timeline(&#123; defaults: &#123; duration: 1 &#125; &#125;);//这样每个动画都是1秒的时长，不用重复写了tl.to(&quot;.green&quot;, &#123; x: 200 &#125;) .to(&quot;.purple&quot;, &#123; x: 200, scale: 0.2 &#125;) .to(&quot;.orange&quot;, &#123; x: 200, scale: 2, y: 20 &#125;); tween 实例通过 tween 实例可以实时控制动画，达到精确交互的效果，官方文档：Tween 123456789let tween = gsap.to(&quot;#logo&quot;, &#123; duration: 1, x: 100 &#125;); // 通过一个变量保存对Tween或者Timeline实例的引用tween.pause(); // 暂停tween.resume(); // 恢复（继续）tween.reverse(); // 反向变化tween.reversed(!tween.reversed()); // 如果在正向则实现正向到反向，否则反之tween.seek(0.5); // 直接切换到整个动画变化时长的0.5秒的时间点的状态tween.progress(0.25); // 直接切换到整个变化过程的1/4的节点的状态tween.timeScale(0.5); // 让运动减速到0.5倍tween.kill(); // 直接销毁tween实例，让垃圾回收机制可以处理该实例所占用的内存 动画回调函数动画属性除了可以传入 CSS 位移状态属性，特殊配置项属性，还可以传入动画回调函数 onStart、onComplete、onUpdate 等 通常使用的是 onUpdate，并且搭配 requestAnimationFrame 原生函数进行图形绘制，具体文档参考：special-properties 1234567891011onUpdate: (self) =&gt; &#123; // self.progress 表示滚动的百分比 0-1 const frameIndex = Math.min( FRAME_COUNT, Math.ceil(self.progress * FRAME_COUNT + 1) ); requestAnimationFrame(() =&gt; &#123; img.src = getCurrentFrame(frameIndex); context?.drawImage(img, 0, 0); &#125;);&#125;; 其他拓展学习关键帧动画该配置是对一个元素进行分段式动画配置，使用方法参考文档：keyframes 123456789101112131415161718192021// 数组分段形式gsap.to(&quot;.elem&quot;, &#123; keyframes: [ // 注意这里是数组 &#123;x: 100, duration: 1, ease: &#x27;sine.out&#x27;&#125;, // 定义这个分段动画自己的ease曲线 &#123;y: 200, duration: 1, delay: 0.5&#125;, // 产生和前个分段动画0.5秒的间隔 &#123;rotation: 360, duration: 2, delay: -0.25&#125; // 和前一个分段动画产生0.25秒的重叠 ], ease: &#x27;expo.inOut&#x27; // 设置整个关键帧动画的曲线&#125;);// 百分比分段形式gsap.to(&quot;.elem&quot;, &#123; keyframes: &#123; // 注意这里是对象 &quot;0%&quot;: &#123; x: 100, y: 100&#125;, &quot;75%&quot;: &#123; x: 0, y: 0, ease: &#x27;sine.out&#x27;&#125;, // 指定这个分段的动画曲线 &quot;100%&quot;: &#123; x: 50, y: 50 &#125;, easeEach: &#x27;expo.inOut&#x27; // 每个分段的动画曲线 &#125;, ease: &#x27;none&#x27; // 整个关键帧动画的动画曲线 duration: 2,&#125;) 滚动插件 加上滚动插件可以让一个元素的动画和某个元素的滚动捆绑再一起，即滚动开始动画开始滚动停止动画停止，参考文档：scrollTrigger 123456789gsap.to(&quot;.green&quot;, &#123; rotation: 900, duration: 1, scrollTrigger: &#123; trigger: &quot;.box&quot;, scrub: 2, scrub: true, // 动画重复执行几次 &#125;,&#125;); 在 React 中使用基本规范就是使用 useLayoutEffect、gsap.context、context.revert，关于在使用动画方面的组件通信可以参考：withreact 123456789101112131415161718const boxRef = useRef();useLayoutEffect(() =&gt; &#123; // 通过Ref的方式来获取到dom元素 console.log(boxRef); // &#123; current: div.box &#125; // 然后我们就可以用gsap的方式来进行动画了 gsap.to(boxRef.current, &#123; rotation: &quot;+=360&quot;, &#125;);&#125;);return ( &lt;div className=&quot;App&quot;&gt; &lt;div className=&quot;box&quot; ref=&#123;boxRef&#125;&gt; Hello &lt;/div&gt; &lt;/div&gt;);","tags":["GASP"],"categories":["技术文档"]},{"title":"Hexo 个人博客搭建","path":"/2025/04/29/hexo-learn/","content":"Hexo 个人博客搭建 Hexo 官网：https://hexo.io/zh-cn/docs/，下面手把手讲一讲初始化搭建过程 Stellar Hexo GitHub 搭建过程使用 NodeV18 全局安装 Hexo 1$ npm install -g hexo-cli 进入文档文件夹初始化一个项目 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 使用 Hexo 命令来本地预览 123$ hexo server$ hexo clean$ hexo generate Hexo 项目配置热更新 安装 hexo-browsersync，之后运行 hexo server 时会自动进行热更新 1$ npm install hexo-browsersync --save 在 _config.yml 文件中可自定义 browsersync 的配置：browsersync-options 12browsersync: notify: false # 关闭浏览器更新提示 部署过程通过 cocoonnu.github.io 一键部署 在 Github 中新建一个名为 cocoonnu.github.io 的项目，确保项目的 Settings -&gt; Pages 配置中选择的是 Deploy from a branch 在 Hexo 项目的根目录中对 _config.yml 文件添加以下内容，分支名和 Deploy from a branch 选择的一致为 main 1234deploy: type: git repo: git@github.com:cocoonnu/cocoonnu.github.io.git branch: main 下载自动部署工具 1$ npm install hexo-deployer-git --save 最后使用命令进行一键部署即可，在 Github 项目中 Settings -&gt; Actions 查看部署结果 12$ hexo clean # 清除旧页面$ hexo deploy 在这里预览页面：https://cocoonnu.github.io/ 通过 GitHub Pages 一键部署 在 Github 中新建一个同名的项目并同步 git，确保项目的 Settings -&gt; Pages 配置中选择的是 GitHub Actions 在 Hexo 项目的根目录中新建 .github&#x2F;workflows&#x2F;pages.yml，填入：https://hexo.io/zh-cn/docs/github-pages 最后直接提交代码即可同步一键部署，在 Github 项目中 Settings -&gt; Actions 查看部署结果 在这里预览页面：https://cocoonnu.github.io/hexo-blog-cocoon/ 这是&nbsp;Stellar&nbsp;主题中备注块标签的使用color 可设置 red、orange、amber、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 主题配置Stellar 主题配置 进入 Stellar 官网，可以看到 Stellar 主题的详细配置，这里只介绍几个常用的配置 通过本地运行 stellar-examples 示例项目来引入官网使用的样式 全局配置项主要在 _config.yml 和 _config.stellar.yml 两个文件中进行配置 博客内容主要使用 Markdown 顶部配置和语法、Stellar 内置的标签组件进行编写和排版 https://xaoxuu.com/wiki/stellar/tag-plugins/https://xaoxuu.com/wiki/stellar/tag-plugins/","tags":["Hexo"],"categories":["技术文档"]},{"title":"关于","path":"/about/index.html","content":"友链关于cocoondesigned by cocoon 关于本站 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。 开源项目无任何盈利目的，只在工作闲暇时间进行维护，有相关需求请前往对应项目提 Issue 进行反馈，通过私人邮件询问开源项目问题可能得不到答复。"}]