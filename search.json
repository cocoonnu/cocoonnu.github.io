[{"title":"GASP 动画库学习指南","path":"/2025/05/06/gasp-learn/","content":"GASP 动画库学习指南 GASP 官方文档：https://gsap.com/，这篇文章会大致介绍一些动画工具的使用 GASP 基础使用首先 GASP 导出了四种动画方式，或者说是数值变化方式，常用的是 gasp.to(target, &#123;...&#125;) 就是让元素从初始状态变化到目标状态 其中 target 可以选择 DOM 元素，通常使用opacity 和 transform 这两个配置项来改变元素的状态和位移，属性参考：CorePlugins，还有一些特殊的配置项如：special-properties，主要用于控制一些动画的配置比如：ease、yoyo、repeat、delay、duration 这里再主要介绍 stagger 这个属性：如果 target 是一个数组或者选中了多个元素，那么可以让这些元素依次延时 stagger 执行相同的动画 123456789gsap.to(&quot;.box&quot;, &#123; duration: 1, rotation: 360, opacity: 1, delay: 0.5, stagger: 1, ease: &quot;sine.out&quot;, force3D: true,&#125;); targer 还可以是一个对象或者一个数值，GASP 依然可以精确实现数值的动态变化 1234567let obj = &#123; myNum: 10, myColor: &quot;red&quot; &#125;;gsap.to(obj, &#123; myNum: 200, myColor: &quot;blue&quot;, duration: 4, onUpdate: () =&gt; console.log(obj.myNum, obj.myColor),&#125;); 时间线的使用通过 let tl = gsap.timeline(&#123;...&#125;) 创建时间线后，可以决定时间线上动画的执行 时间线本质也是个动画，只不过是拆成了一个个子动画，并且可以控制这些子动画的执行顺序，因此后面的配置项可以控制这个时间线动画的属性：special-properties-and-callbacks 1234let tl = gsap.timeline(&#123; repeat: -1, repeatDelay: 1, yoyo: true &#125;); // 设置时间线动画无限执行tl.to(&quot;.green&quot;, &#123; rotation: 360 &#125;);tl.to(&quot;.purple&quot;, &#123; rotation: 360 &#125;);tl.to(&quot;.orange&quot;, &#123; rotation: 360 &#125;); 通过设置 defaults: &#123; duration: 1, ease: &quot;elastic&quot; &#125;，配置子动画的默认属性，得到配置的效率提升 12345var tl = gsap.timeline(&#123; defaults: &#123; duration: 1 &#125; &#125;);//这样每个动画都是1秒的时长，不用重复写了tl.to(&quot;.green&quot;, &#123; x: 200 &#125;) .to(&quot;.purple&quot;, &#123; x: 200, scale: 0.2 &#125;) .to(&quot;.orange&quot;, &#123; x: 200, scale: 2, y: 20 &#125;); tween 实例通过 tween 实例可以实时控制动画，达到精确交互的效果，官方文档：Tween 123456789let tween = gsap.to(&quot;#logo&quot;, &#123; duration: 1, x: 100 &#125;); // 通过一个变量保存对Tween或者Timeline实例的引用tween.pause(); // 暂停tween.resume(); // 恢复（继续）tween.reverse(); // 反向变化tween.reversed(!tween.reversed()); // 如果在正向则实现正向到反向，否则反之tween.seek(0.5); // 直接切换到整个动画变化时长的0.5秒的时间点的状态tween.progress(0.25); // 直接切换到整个变化过程的1/4的节点的状态tween.timeScale(0.5); // 让运动减速到0.5倍tween.kill(); // 直接销毁tween实例，让垃圾回收机制可以处理该实例所占用的内存 动画回调函数动画属性除了可以传入 CSS 位移状态属性，特殊配置项属性，还可以传入动画回调函数 onStart、onComplete、onUpdate 等 通常使用的是 onUpdate，并且搭配 requestAnimationFrame 原生函数进行图形绘制，具体文档参考：special-properties 1234567891011onUpdate: (self) =&gt; &#123; // self.progress 表示滚动的百分比 0-1 const frameIndex = Math.min( FRAME_COUNT, Math.ceil(self.progress * FRAME_COUNT + 1) ); requestAnimationFrame(() =&gt; &#123; img.src = getCurrentFrame(frameIndex); context?.drawImage(img, 0, 0); &#125;);&#125;; 其他拓展学习关键帧动画该配置是对一个元素进行分段式动画配置，使用方法参考文档：keyframes 123456789101112131415161718192021// 数组分段形式gsap.to(&quot;.elem&quot;, &#123; keyframes: [ // 注意这里是数组 &#123;x: 100, duration: 1, ease: &#x27;sine.out&#x27;&#125;, // 定义这个分段动画自己的ease曲线 &#123;y: 200, duration: 1, delay: 0.5&#125;, // 产生和前个分段动画0.5秒的间隔 &#123;rotation: 360, duration: 2, delay: -0.25&#125; // 和前一个分段动画产生0.25秒的重叠 ], ease: &#x27;expo.inOut&#x27; // 设置整个关键帧动画的曲线&#125;);// 百分比分段形式gsap.to(&quot;.elem&quot;, &#123; keyframes: &#123; // 注意这里是对象 &quot;0%&quot;: &#123; x: 100, y: 100&#125;, &quot;75%&quot;: &#123; x: 0, y: 0, ease: &#x27;sine.out&#x27;&#125;, // 指定这个分段的动画曲线 &quot;100%&quot;: &#123; x: 50, y: 50 &#125;, easeEach: &#x27;expo.inOut&#x27; // 每个分段的动画曲线 &#125;, ease: &#x27;none&#x27; // 整个关键帧动画的动画曲线 duration: 2,&#125;) 滚动插件 加上滚动插件可以让一个元素的动画和某个元素的滚动捆绑再一起，即滚动开始动画开始滚动停止动画停止，参考文档：scrollTrigger 123456789gsap.to(&quot;.green&quot;, &#123; rotation: 900, duration: 1, scrollTrigger: &#123; trigger: &quot;.box&quot;, scrub: 2, scrub: true, // 动画重复执行几次 &#125;,&#125;); 在 React 中使用基本规范就是使用 useLayoutEffect、gsap.context、context.revert，关于在使用动画方面的组件通信可以参考：withreact 123456789101112131415161718const boxRef = useRef();useLayoutEffect(() =&gt; &#123; // 通过Ref的方式来获取到dom元素 console.log(boxRef); // &#123; current: div.box &#125; // 然后我们就可以用gsap的方式来进行动画了 gsap.to(boxRef.current, &#123; rotation: &quot;+=360&quot;, &#125;);&#125;);return ( &lt;div className=&quot;App&quot;&gt; &lt;div className=&quot;box&quot; ref=&#123;boxRef&#125;&gt; Hello &lt;/div&gt; &lt;/div&gt;);","tags":["GASP"],"categories":["技术文档"]},{"title":"Hexo 个人博客搭建","path":"/2025/04/29/hexo-learn/","content":"Hexo 个人博客搭建 Hexo 官网：https://hexo.io/zh-cn/docs/，下面手把手讲一讲初始化搭建过程 Stellar Hexo GitHub 搭建过程使用 NodeV18 全局安装 Hexo 1$ npm install -g hexo-cli 进入文档文件夹初始化一个项目 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 使用 Hexo 命令来本地预览 123$ hexo server$ hexo clean$ hexo generate Hexo 项目配置热更新 安装 hexo-browsersync，之后运行 hexo server 时会自动进行热更新 1$ npm install hexo-browsersync --save 在 _config.yml 文件中可自定义 browsersync 的配置：browsersync-options 12browsersync: notify: false # 关闭浏览器更新提示 部署过程通过 cocoonnu.github.io 一键部署 在 Github 中新建一个名为 cocoonnu.github.io 的项目，确保项目的 Settings -&gt; Pages 配置中选择的是 Deploy from a branch 在 Hexo 项目的根目录中对 _config.yml 文件添加以下内容，分支名和 Deploy from a branch 选择的一致为 main 1234deploy: type: git repo: git@github.com:cocoonnu/cocoonnu.github.io.git branch: main 下载自动部署工具 1$ npm install hexo-deployer-git --save 最后使用命令进行一键部署即可，在 Github 项目中 Settings -&gt; Actions 查看部署结果 12$ hexo clean # 清除旧页面$ hexo deploy 在这里预览页面：https://cocoonnu.github.io/ 通过 GitHub Pages 一键部署 在 Github 中新建一个同名的项目并同步 git，确保项目的 Settings -&gt; Pages 配置中选择的是 GitHub Actions 在 Hexo 项目的根目录中新建 .github&#x2F;workflows&#x2F;pages.yml，填入：https://hexo.io/zh-cn/docs/github-pages 最后直接提交代码即可同步一键部署，在 Github 项目中 Settings -&gt; Actions 查看部署结果 在这里预览页面：https://cocoonnu.github.io/hexo-blog-cocoon/ 这是&nbsp;Stellar&nbsp;主题中备注块标签的使用color 可设置 red、orange、amber、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 主题配置Stellar 主题配置 进入 Stellar 官网，可以看到 Stellar 主题的详细配置，这里只介绍几个常用的配置 通过本地运行 stellar-examples 示例项目来引入官网使用的样式 全局配置项主要在 _config.yml 和 _config.stellar.yml 两个文件中进行配置 博客内容主要使用 Markdown 顶部配置和语法、Stellar 内置的标签组件进行编写和排版 https://xaoxuu.com/wiki/stellar/tag-plugins/https://xaoxuu.com/wiki/stellar/tag-plugins/","tags":["Hexo"],"categories":["技术文档"]},{"title":"关于","path":"/about/index.html","content":"友链关于cocoondesigned by cocoon 关于本站 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。 开源项目无任何盈利目的，只在工作闲暇时间进行维护，有相关需求请前往对应项目提 Issue 进行反馈，通过私人邮件询问开源项目问题可能得不到答复。"}]